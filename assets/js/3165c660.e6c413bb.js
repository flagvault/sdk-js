"use strict";(self.webpackChunkflagvault_sdk_docs=self.webpackChunkflagvault_sdk_docs||[]).push([[425],{3869:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"integrations/django","title":"Django Integration Guide","description":"This guide shows how to integrate FlagVault with your Django application for feature flag management.","source":"@site/docs/integrations/django.md","sourceDirName":"integrations","slug":"/integrations/django","permalink":"/docs/integrations/django","draft":false,"unlisted":false,"editUrl":"https://github.com/flagvault/sdk-js/edit/main/docs-website/docs/integrations/django.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"React Integration Guide","permalink":"/docs/integrations/react"},"next":{"title":"Flask Integration Guide","permalink":"/docs/integrations/flask"}}');var l=a(4848),s=a(8453);const r={sidebar_position:1},i="Django Integration Guide",o={},d=[{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:2},{value:"1. Environment Variables",id:"1-environment-variables",level:3},{value:"2. Django Settings",id:"2-django-settings",level:3},{value:"Service Integration",id:"service-integration",level:2},{value:"1. Create a FlagVault Service",id:"1-create-a-flagvault-service",level:3},{value:"2. Use in Views",id:"2-use-in-views",level:3},{value:"Template Integration",id:"template-integration",level:2},{value:"1. Create Template Tags",id:"1-create-template-tags",level:3},{value:"2. Use in Templates",id:"2-use-in-templates",level:3},{value:"Middleware Integration",id:"middleware-integration",level:2},{value:"Context Processor",id:"context-processor",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Centralized Flag Management",id:"1-centralized-flag-management",level:3},{value:"2. Feature Flag Decorators",id:"2-feature-flag-decorators",level:3},{value:"3. Admin Integration",id:"3-admin-integration",level:3},{value:"Testing with Feature Flags",id:"testing-with-feature-flags",level:2},{value:"1. Mock Feature Flags in Tests",id:"1-mock-feature-flags-in-tests",level:3},{value:"2. Test Both States",id:"2-test-both-states",level:3},{value:"Production Considerations",id:"production-considerations",level:2},{value:"1. Caching",id:"1-caching",level:3},{value:"2. Performance Monitoring",id:"2-performance-monitoring",level:3},{value:"3. Graceful Degradation",id:"3-graceful-degradation",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Mode",id:"debug-mode",level:3},{value:"Example: Complete Integration",id:"example-complete-integration",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"django-integration-guide",children:"Django Integration Guide"})}),"\n",(0,l.jsx)(n.p,{children:"This guide shows how to integrate FlagVault with your Django application for feature flag management."}),"\n",(0,l.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"pip install flagvault-sdk python-dotenv\n"})}),"\n",(0,l.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,l.jsx)(n.h3,{id:"1-environment-variables",children:"1. Environment Variables"}),"\n",(0,l.jsxs)(n.p,{children:["Create a ",(0,l.jsx)(n.code,{children:".env"})," file in your project root:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# FlagVault Configuration\nFLAGVAULT_API_KEY=test_your_api_key_here\n"})}),"\n",(0,l.jsx)(n.h3,{id:"2-django-settings",children:"2. Django Settings"}),"\n",(0,l.jsxs)(n.p,{children:["Update your ",(0,l.jsx)(n.code,{children:"settings.py"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"import os\nfrom dotenv import load_dotenv\n\n# Load environment variables\nload_dotenv()\n\n# FlagVault Configuration\nFLAGVAULT_API_KEY = os.getenv('FLAGVAULT_API_KEY')\n"})}),"\n",(0,l.jsx)(n.h2,{id:"service-integration",children:"Service Integration"}),"\n",(0,l.jsx)(n.h3,{id:"1-create-a-flagvault-service",children:"1. Create a FlagVault Service"}),"\n",(0,l.jsxs)(n.p,{children:["Create ",(0,l.jsx)(n.code,{children:"services.py"})," in your Django app:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import logging\nfrom typing import Dict, Any, Optional\nfrom django.conf import settings\nfrom flagvault_sdk import FlagVaultSDK\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlagVaultService:\n    """Service class for FlagVault integration"""\n    \n    _instance = None\n    _client = None\n    \n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super(FlagVaultService, cls).__new__(cls)\n        return cls._instance\n    \n    def __init__(self):\n        if self._client is None:\n            self._initialize_client()\n    \n    def _initialize_client(self):\n        """Initialize FlagVault client with Django settings"""\n        api_key = getattr(settings, \'FLAGVAULT_API_KEY\', None)\n        \n        if not api_key:\n            logger.warning("FLAGVAULT_API_KEY not configured. Feature flags will use default values.")\n            self._client = None\n            return\n        \n        try:\n            self._client = FlagVaultSDK(api_key=api_key)\n            logger.info("FlagVault client initialized successfully")\n        except Exception as e:\n            logger.error(f"Failed to initialize FlagVault client: {e}")\n            self._client = None\n    \n    def is_enabled(self, flag_key: str, default_value: bool = False, user_context: Optional[Dict[str, Any]] = None) -> bool:\n        """\n        Check if a feature flag is enabled\n        \n        Args:\n            flag_key: The feature flag key\n            default_value: Default value if flag cannot be retrieved\n            user_context: User context for targeted flags (future feature)\n        \n        Returns:\n            Boolean indicating if flag is enabled\n        """\n        if not self._client:\n            logger.debug(f"FlagVault client not available, returning default value {default_value} for flag \'{flag_key}\'")\n            return default_value\n        \n        # SDK v1.1.0+ handles errors gracefully\n        return self._client.is_enabled(flag_key, default_value)\n\n\n# Global instance\nflagvault = FlagVaultService()\n'})}),"\n",(0,l.jsx)(n.h3,{id:"2-use-in-views",children:"2. Use in Views"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from django.shortcuts import render\nfrom .services import flagvault\n\n\ndef my_view(request):\n    # Check if new dashboard is enabled\n    if flagvault.is_enabled('new-dashboard-layout'):\n        return render(request, 'new_dashboard.html')\n    else:\n        return render(request, 'old_dashboard.html')\n\n\ndef checkout_view(request):\n    context = {\n        'enhanced_checkout': flagvault.is_enabled('enhanced-checkout', default_value=False),\n        'express_payment': flagvault.is_enabled('express-payment', default_value=False),\n    }\n    return render(request, 'checkout.html', context)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"template-integration",children:"Template Integration"}),"\n",(0,l.jsx)(n.h3,{id:"1-create-template-tags",children:"1. Create Template Tags"}),"\n",(0,l.jsxs)(n.p,{children:["Create ",(0,l.jsx)(n.code,{children:"templatetags/flagvault_tags.py"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from django import template\nfrom ..services import flagvault\n\nregister = template.Library()\n\n\n@register.simple_tag\ndef flag_enabled(flag_key, default=False):\n    """\n    Template tag to check if a feature flag is enabled\n    \n    Usage:\n        {% load flagvault_tags %}\n        {% flag_enabled \'new-feature\' as is_enabled %}\n    """\n    return flagvault.is_enabled(flag_key, default)\n\n\n@register.filter\ndef is_flag_enabled(flag_key, default=False):\n    """\n    Template filter to check if a feature flag is enabled\n    \n    Usage:\n        {% if \'new-feature\'|is_flag_enabled %}\n    """\n    return flagvault.is_enabled(flag_key, default)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"2-use-in-templates",children:"2. Use in Templates"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-django",children:'{% load flagvault_tags %}\n\n\x3c!-- Using the simple tag --\x3e\n{% flag_enabled \'new-dashboard-layout\' as new_dashboard %}\n{% if new_dashboard %}\n    <div class="modern-dashboard">\n        <h1>Welcome to the New Dashboard!</h1>\n        \x3c!-- New dashboard content --\x3e\n    </div>\n{% else %}\n    <div class="classic-dashboard">\n        <h1>Dashboard</h1>\n        \x3c!-- Classic dashboard content --\x3e\n    </div>\n{% endif %}\n\n\x3c!-- Using the filter --\x3e\n{% if \'enhanced-checkout\'|is_flag_enabled %}\n    <button class="btn-primary">Express Checkout</button>\n{% else %}\n    <button class="btn-default">Proceed to Checkout</button>\n{% endif %}\n\n\x3c!-- With default value --\x3e\n{% flag_enabled \'beta-features\' True as show_beta %}\n{% if show_beta %}\n    <div class="beta-banner">\n        \ud83d\ude80 Beta features are available!\n    </div>\n{% endif %}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"middleware-integration",children:"Middleware Integration"}),"\n",(0,l.jsx)(n.p,{children:"Create middleware to add feature flags to request context:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# middleware.py\nfrom .services import flagvault\n\n\nclass FlagVaultMiddleware:\n    """Add feature flags to request object"""\n    \n    def __init__(self, get_response):\n        self.get_response = get_response\n    \n    def __call__(self, request):\n        # Add feature flags to request\n        request.feature_flags = flagvault\n        \n        response = self.get_response(request)\n        return response\n\n\n# In settings.py, add to MIDDLEWARE:\nMIDDLEWARE = [\n    # ... other middleware\n    \'myapp.middleware.FlagVaultMiddleware\',\n]\n'})}),"\n",(0,l.jsx)(n.p,{children:"Use in views:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def my_view(request):\n    if request.feature_flags.is_enabled('new-feature'):\n        # New feature code\n        pass\n"})}),"\n",(0,l.jsx)(n.h2,{id:"context-processor",children:"Context Processor"}),"\n",(0,l.jsx)(n.p,{children:"Add feature flags to all templates:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# context_processors.py\nfrom .services import flagvault\n\n\ndef feature_flags(request):\n    \"\"\"Add feature flags to template context\"\"\"\n    return {\n        'feature_flags': flagvault,\n    }\n\n\n# In settings.py:\nTEMPLATES = [\n    {\n        'OPTIONS': {\n            'context_processors': [\n                # ... other processors\n                'myapp.context_processors.feature_flags',\n            ],\n        },\n    },\n]\n"})}),"\n",(0,l.jsx)(n.p,{children:"Use in any template:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-django",children:"{% if feature_flags.is_enabled('new-feature') %}\n    \x3c!-- Feature enabled content --\x3e\n{% endif %}\n"})}),"\n",(0,l.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsx)(n.h3,{id:"1-centralized-flag-management",children:"1. Centralized Flag Management"}),"\n",(0,l.jsx)(n.p,{children:"Create a flags module for consistency:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# flags.py\nclass FeatureFlags:\n    \"\"\"Centralized feature flag definitions\"\"\"\n    # Dashboard\n    NEW_DASHBOARD = 'new-dashboard-layout'\n    DARK_MODE = 'dark-mode'\n    \n    # E-commerce\n    ENHANCED_CHECKOUT = 'enhanced-checkout'\n    EXPRESS_PAYMENT = 'express-payment'\n    PRODUCT_REVIEWS = 'product-reviews'\n    \n    # Beta features\n    AI_RECOMMENDATIONS = 'ai-recommendations'\n    ADVANCED_SEARCH = 'advanced-search'\n\n\n# Usage\nfrom .flags import FeatureFlags\nfrom .services import flagvault\n\nif flagvault.is_enabled(FeatureFlags.NEW_DASHBOARD):\n    # ...\n"})}),"\n",(0,l.jsx)(n.h3,{id:"2-feature-flag-decorators",children:"2. Feature Flag Decorators"}),"\n",(0,l.jsx)(n.p,{children:"Create decorators for view-level control:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# decorators.py\nfrom functools import wraps\nfrom django.http import Http404\nfrom django.shortcuts import redirect\nfrom .services import flagvault\n\n\ndef feature_required(flag_key, default=False, redirect_url=None):\n    """Decorator to require a feature flag to be enabled"""\n    def decorator(view_func):\n        @wraps(view_func)\n        def wrapped(request, *args, **kwargs):\n            if not flagvault.is_enabled(flag_key, default):\n                if redirect_url:\n                    return redirect(redirect_url)\n                raise Http404("Feature not available")\n            return view_func(request, *args, **kwargs)\n        return wrapped\n    return decorator\n\n\n# Usage\n@feature_required(\'beta-features\', redirect_url=\'/upgrade\')\ndef beta_view(request):\n    return render(request, \'beta_features.html\')\n'})}),"\n",(0,l.jsx)(n.h3,{id:"3-admin-integration",children:"3. Admin Integration"}),"\n",(0,l.jsx)(n.p,{children:"Show feature flag status in Django admin:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# admin.py\nfrom django.contrib import admin\nfrom django.utils.html import format_html\nfrom .services import flagvault\n\n\nclass FeatureFlagAdmin(admin.ModelAdmin):\n    \"\"\"Base admin class with feature flag info\"\"\"\n    \n    def get_list_display(self, request):\n        \"\"\"Add feature flag status to list display\"\"\"\n        list_display = super().get_list_display(request)\n        if flagvault.is_enabled('admin-enhancements'):\n            return list(list_display) + ['feature_status']\n        return list_display\n    \n    def feature_status(self, obj):\n        \"\"\"Show relevant feature flags for this object\"\"\"\n        flags = []\n        if flagvault.is_enabled('enhanced-editing'):\n            flags.append('\u270f\ufe0f Enhanced Editing')\n        if flagvault.is_enabled('bulk-operations'):\n            flags.append('\ud83d\udce6 Bulk Operations')\n        \n        if flags:\n            return format_html('<br>'.join(flags))\n        return '-'\n    feature_status.short_description = 'Active Features'\n"})}),"\n",(0,l.jsx)(n.h2,{id:"testing-with-feature-flags",children:"Testing with Feature Flags"}),"\n",(0,l.jsx)(n.h3,{id:"1-mock-feature-flags-in-tests",children:"1. Mock Feature Flags in Tests"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# tests.py\nfrom unittest.mock import patch\nfrom django.test import TestCase\nfrom .services import flagvault\n\n\nclass MyViewTests(TestCase):\n    @patch.object(flagvault, 'is_enabled')\n    def test_new_dashboard_enabled(self, mock_is_enabled):\n        # Mock flag as enabled\n        mock_is_enabled.return_value = True\n        \n        response = self.client.get('/dashboard/')\n        self.assertContains(response, 'Welcome to the New Dashboard')\n    \n    @patch.object(flagvault, 'is_enabled')\n    def test_new_dashboard_disabled(self, mock_is_enabled):\n        # Mock flag as disabled\n        mock_is_enabled.return_value = False\n        \n        response = self.client.get('/dashboard/')\n        self.assertContains(response, 'Dashboard')\n        self.assertNotContains(response, 'New Dashboard')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"2-test-both-states",children:"2. Test Both States"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'def test_feature_flag_states():\n    """Test both enabled and disabled states"""\n    from django.test import override_settings\n    \n    # Test with flags disabled (no API key)\n    with override_settings(FLAGVAULT_API_KEY=None):\n        assert not flagvault.is_enabled(\'any-flag\')\n    \n    # Test with custom defaults\n    assert flagvault.is_enabled(\'missing-flag\', default_value=True) == True\n'})}),"\n",(0,l.jsx)(n.h2,{id:"production-considerations",children:"Production Considerations"}),"\n",(0,l.jsx)(n.h3,{id:"1-caching",children:"1. Caching"}),"\n",(0,l.jsx)(n.p,{children:"Cache flag values to reduce API calls:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from django.core.cache import cache\n\nclass CachedFlagVaultService(FlagVaultService):\n    def is_enabled(self, flag_key: str, default_value: bool = False, user_context=None) -> bool:\n        cache_key = f'flagvault:{flag_key}'\n        cached_value = cache.get(cache_key)\n        \n        if cached_value is not None:\n            return cached_value\n        \n        value = super().is_enabled(flag_key, default_value, user_context)\n        cache.set(cache_key, value, timeout=300)  # Cache for 5 minutes\n        \n        return value\n"})}),"\n",(0,l.jsx)(n.h3,{id:"2-performance-monitoring",children:"2. Performance Monitoring"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"import time\nfrom django.core.signals import request_started, request_finished\n\nclass FlagVaultMetrics:\n    def __init__(self):\n        self.flag_checks = {}\n        \n    def record_check(self, flag_key, duration):\n        if flag_key not in self.flag_checks:\n            self.flag_checks[flag_key] = []\n        self.flag_checks[flag_key].append(duration)\n    \n    def get_stats(self):\n        stats = {}\n        for flag, durations in self.flag_checks.items():\n            stats[flag] = {\n                'count': len(durations),\n                'avg_ms': sum(durations) / len(durations) * 1000\n            }\n        return stats\n\nmetrics = FlagVaultMetrics()\n"})}),"\n",(0,l.jsx)(n.h3,{id:"3-graceful-degradation",children:"3. Graceful Degradation"}),"\n",(0,l.jsx)(n.p,{children:"The SDK v1.1.0+ automatically handles errors gracefully:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# No need for try/catch - SDK returns default_value on error\nis_enabled = flagvault.is_enabled('my-feature', default_value=False)\n\n# Errors are logged but won't crash your application\n# Example console output:\n# FlagVault: Failed to connect to API for flag 'my-feature', using default: False\n"})}),"\n",(0,l.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,l.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Feature flags always return default value"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Check if ",(0,l.jsx)(n.code,{children:"FLAGVAULT_API_KEY"})," is set correctly"]}),"\n",(0,l.jsx)(n.li,{children:"Verify the API key prefix matches your environment"}),"\n",(0,l.jsx)(n.li,{children:"Check Django logs for initialization errors"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Template tags not working"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Ensure the app is in ",(0,l.jsx)(n.code,{children:"INSTALLED_APPS"})]}),"\n",(0,l.jsxs)(n.li,{children:["Check that ",(0,l.jsx)(n.code,{children:"__init__.py"})," exists in templatetags directory"]}),"\n",(0,l.jsx)(n.li,{children:"Restart Django server after adding template tags"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Slow response times"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Implement caching as shown above"}),"\n",(0,l.jsx)(n.li,{children:"Consider increasing the SDK timeout"}),"\n",(0,l.jsx)(n.li,{children:"Check network connectivity to FlagVault API"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,l.jsx)(n.p,{children:"Enable detailed logging:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# settings.py\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n    },\n    'loggers': {\n        'myapp.services': {\n            'handlers': ['console'],\n            'level': 'DEBUG',\n        },\n    },\n}\n"})}),"\n",(0,l.jsx)(n.h2,{id:"example-complete-integration",children:"Example: Complete Integration"}),"\n",(0,l.jsx)(n.p,{children:"Here's a complete example showing all the pieces together:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# views.py\nfrom django.shortcuts import render\nfrom django.contrib.auth.decorators import login_required\nfrom .services import flagvault\nfrom .decorators import feature_required\nfrom .flags import FeatureFlags\n\n\n@login_required\ndef dashboard_view(request):\n    context = {\n        'user': request.user,\n        'show_analytics': flagvault.is_enabled(FeatureFlags.ADVANCED_ANALYTICS),\n        'dark_mode_available': flagvault.is_enabled(FeatureFlags.DARK_MODE),\n    }\n    \n    if flagvault.is_enabled(FeatureFlags.NEW_DASHBOARD):\n        template = 'dashboard/new.html'\n    else:\n        template = 'dashboard/classic.html'\n    \n    return render(request, template, context)\n\n\n@feature_required(FeatureFlags.BETA_FEATURES)\ndef beta_features_view(request):\n    \"\"\"This view is only accessible when beta features are enabled\"\"\"\n    return render(request, 'beta/features.html')\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-django",children:'\x3c!-- templates/dashboard/new.html --\x3e\n{% load flagvault_tags %}\n\n<div class="dashboard-container">\n    <h1>Welcome, {{ user.username }}!</h1>\n    \n    {% if show_analytics %}\n    <div class="analytics-panel">\n        \x3c!-- Advanced analytics content --\x3e\n    </div>\n    {% endif %}\n    \n    {% flag_enabled \'ai-recommendations\' as show_ai %}\n    {% if show_ai %}\n    <div class="ai-recommendations">\n        <h2>\ud83e\udd16 AI Recommendations</h2>\n        \x3c!-- AI-powered content --\x3e\n    </div>\n    {% endif %}\n    \n    {% if dark_mode_available %}\n    <button onclick="toggleDarkMode()">\ud83c\udf19 Toggle Dark Mode</button>\n    {% endif %}\n</div>\n'})}),"\n",(0,l.jsx)(n.p,{children:"This integration provides a robust, production-ready setup for using FlagVault with Django!"})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>i});var t=a(6540);const l={},s=t.createContext(l);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);