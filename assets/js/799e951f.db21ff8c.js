"use strict";(self.webpackChunkflagvault_sdk_docs=self.webpackChunkflagvault_sdk_docs||[]).push([[550],{8068:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"integrations/flask","title":"Flask Integration Guide","description":"This guide shows how to integrate FlagVault with your Flask application for feature flag management.","source":"@site/docs/integrations/flask.md","sourceDirName":"integrations","slug":"/integrations/flask","permalink":"/docs/integrations/flask","draft":false,"unlisted":false,"editUrl":"https://github.com/flagvault/sdk-js/edit/main/docs-website/docs/integrations/flask.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Django Integration Guide","permalink":"/docs/integrations/django"},"next":{"title":"Versioning & Releases","permalink":"/docs/versioning"}}');var l=a(4848),r=a(8453);const i={sidebar_position:2},s="Flask Integration Guide",o={},d=[{value:"Installation",id:"installation",level:2},{value:"Basic Setup",id:"basic-setup",level:2},{value:"1. Environment Configuration",id:"1-environment-configuration",level:3},{value:"2. Flask Application Setup",id:"2-flask-application-setup",level:3},{value:"Advanced Integration",id:"advanced-integration",level:2},{value:"1. Flask Extension",id:"1-flask-extension",level:3},{value:"2. Configuration",id:"2-configuration",level:3},{value:"Template Integration",id:"template-integration",level:2},{value:"1. Template Context Processor",id:"1-template-context-processor",level:3},{value:"2. Use in Jinja2 Templates",id:"2-use-in-jinja2-templates",level:3},{value:"Route Decorators",id:"route-decorators",level:2},{value:"1. Feature Required Decorator",id:"1-feature-required-decorator",level:3},{value:"2. Usage Examples",id:"2-usage-examples",level:3},{value:"Blueprint Integration",id:"blueprint-integration",level:2},{value:"API Integration",id:"api-integration",level:2},{value:"1. RESTful API with Feature Flags",id:"1-restful-api-with-feature-flags",level:3},{value:"2. Middleware for Feature Flags",id:"2-middleware-for-feature-flags",level:3},{value:"Testing",id:"testing",level:2},{value:"1. Mock Feature Flags",id:"1-mock-feature-flags",level:3},{value:"2. Test Configuration",id:"2-test-configuration",level:3},{value:"Production Best Practices",id:"production-best-practices",level:2},{value:"1. Caching",id:"1-caching",level:3},{value:"2. Performance Monitoring",id:"2-performance-monitoring",level:3},{value:"3. Health Check Endpoint",id:"3-health-check-endpoint",level:3},{value:"Example: Complete Application",id:"example-complete-application",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"flask-integration-guide",children:"Flask Integration Guide"})}),"\n",(0,l.jsx)(n.p,{children:"This guide shows how to integrate FlagVault with your Flask application for feature flag management."}),"\n",(0,l.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"pip install flagvault-sdk python-dotenv\n"})}),"\n",(0,l.jsx)(n.h2,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,l.jsx)(n.h3,{id:"1-environment-configuration",children:"1. Environment Configuration"}),"\n",(0,l.jsxs)(n.p,{children:["Create a ",(0,l.jsx)(n.code,{children:".env"})," file in your project root:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# FlagVault Configuration\nFLAGVAULT_API_KEY=test_your_api_key_here\n"})}),"\n",(0,l.jsx)(n.h3,{id:"2-flask-application-setup",children:"2. Flask Application Setup"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"import os\nfrom flask import Flask, render_template\nfrom dotenv import load_dotenv\nfrom flagvault_sdk import FlagVaultSDK\n\n# Load environment variables\nload_dotenv()\n\napp = Flask(__name__)\n\n# Initialize FlagVault\nflagvault = FlagVaultSDK(\n    api_key=os.getenv('FLAGVAULT_API_KEY')\n)\n\n@app.route('/')\ndef index():\n    # Check feature flag\n    show_new_ui = flagvault.is_enabled('new-ui', default_value=False)\n    \n    if show_new_ui:\n        return render_template('new_index.html')\n    else:\n        return render_template('index.html')\n"})}),"\n",(0,l.jsx)(n.h2,{id:"advanced-integration",children:"Advanced Integration"}),"\n",(0,l.jsx)(n.h3,{id:"1-flask-extension",children:"1. Flask Extension"}),"\n",(0,l.jsx)(n.p,{children:"Create a reusable Flask extension:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# flask_flagvault.py\nimport logging\nfrom flask import current_app, g\nfrom flagvault_sdk import FlagVaultSDK\n\nlogger = logging.getLogger(__name__)\n\n\nclass FlagVault:\n    """Flask extension for FlagVault integration"""\n    \n    def __init__(self, app=None):\n        self.app = app\n        self._client = None\n        if app is not None:\n            self.init_app(app)\n    \n    def init_app(self, app):\n        """Initialize the extension with Flask app"""\n        app.config.setdefault(\'FLAGVAULT_API_KEY\', None)\n        \n        # Initialize client on first request\n        app.before_first_request(self._initialize_client)\n        \n        # Add to app extensions\n        app.extensions = getattr(app, \'extensions\', {})\n        app.extensions[\'flagvault\'] = self\n    \n    def _initialize_client(self):\n        """Initialize FlagVault client"""\n        api_key = current_app.config.get(\'FLAGVAULT_API_KEY\')\n        \n        if not api_key:\n            logger.warning("FLAGVAULT_API_KEY not configured. Feature flags will use default values.")\n            return\n        \n        try:\n            self._client = FlagVaultSDK(api_key=api_key)\n            logger.info("FlagVault client initialized successfully")\n        except Exception as e:\n            logger.error(f"Failed to initialize FlagVault client: {e}")\n            self._client = None\n    \n    def is_enabled(self, flag_key, default_value=False):\n        """Check if a feature flag is enabled"""\n        if not self._client:\n            return default_value\n        \n        return self._client.is_enabled(flag_key, default_value)\n    \n    @property\n    def client(self):\n        """Get the underlying FlagVault client"""\n        return self._client\n\n\n# Usage in app.py\nfrom flask import Flask\nfrom flask_flagvault import FlagVault\n\napp = Flask(__name__)\napp.config.from_object(\'config\')\n\n# Initialize extension\nflagvault = FlagVault(app)\n\n# Or lazy initialization\nflagvault = FlagVault()\n# Later...\nflagvault.init_app(app)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"2-configuration",children:"2. Configuration"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# config.py\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nclass Config:\n    # FlagVault settings\n    FLAGVAULT_API_KEY = os.getenv('FLAGVAULT_API_KEY')\n    \n    # Other Flask settings\n    SECRET_KEY = os.getenv('SECRET_KEY', 'dev-secret-key')\n    DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'\n"})}),"\n",(0,l.jsx)(n.h2,{id:"template-integration",children:"Template Integration"}),"\n",(0,l.jsx)(n.h3,{id:"1-template-context-processor",children:"1. Template Context Processor"}),"\n",(0,l.jsx)(n.p,{children:"Make feature flags available in all templates:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# app.py\nfrom flask import Flask\nfrom flask_flagvault import FlagVault\n\napp = Flask(__name__)\nflagvault = FlagVault(app)\n\n@app.context_processor\ndef inject_feature_flags():\n    """Inject feature flags into template context"""\n    return {\n        \'feature_flags\': flagvault,\n        \'flag_enabled\': flagvault.is_enabled\n    }\n'})}),"\n",(0,l.jsx)(n.h3,{id:"2-use-in-jinja2-templates",children:"2. Use in Jinja2 Templates"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jinja2",children:"\x3c!-- templates/base.html --\x3e\n<!DOCTYPE html>\n<html>\n<head>\n    <title>My App</title>\n    {% if flag_enabled('dark-mode') %}\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/dark-theme.css') }}\">\n    {% else %}\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/light-theme.css') }}\">\n    {% endif %}\n</head>\n<body>\n    {% if flag_enabled('maintenance-banner') %}\n    <div class=\"alert alert-warning\">\n        \ud83d\udd27 Scheduled maintenance tonight at 10 PM EST\n    </div>\n    {% endif %}\n    \n    {% block content %}{% endblock %}\n    \n    {% if flag_enabled('beta-features') %}\n    <div class=\"beta-indicator\">\n        \ud83d\ude80 Beta features enabled\n    </div>\n    {% endif %}\n</body>\n</html>\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jinja2",children:'\x3c!-- templates/dashboard.html --\x3e\n{% extends "base.html" %}\n\n{% block content %}\n<div class="dashboard">\n    <h1>Dashboard</h1>\n    \n    {% if flag_enabled(\'new-dashboard-layout\') %}\n        \x3c!-- New dashboard design --\x3e\n        <div class="grid-layout">\n            <div class="card analytics">\n                <h2>Analytics</h2>\n                {% if flag_enabled(\'advanced-analytics\') %}\n                    \x3c!-- Advanced analytics --\x3e\n                {% else %}\n                    \x3c!-- Basic analytics --\x3e\n                {% endif %}\n            </div>\n        </div>\n    {% else %}\n        \x3c!-- Classic dashboard --\x3e\n        <div class="list-layout">\n            \x3c!-- Classic content --\x3e\n        </div>\n    {% endif %}\n</div>\n{% endblock %}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"route-decorators",children:"Route Decorators"}),"\n",(0,l.jsx)(n.h3,{id:"1-feature-required-decorator",children:"1. Feature Required Decorator"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# decorators.py\nfrom functools import wraps\nfrom flask import abort, redirect, url_for, current_app\n\n\ndef feature_required(flag_key, default=False, redirect_to=None):\n    """Decorator to require a feature flag to be enabled"""\n    def decorator(f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):\n            flagvault = current_app.extensions.get(\'flagvault\')\n            if not flagvault or not flagvault.is_enabled(flag_key, default):\n                if redirect_to:\n                    return redirect(url_for(redirect_to))\n                abort(404)  # Feature not found\n            return f(*args, **kwargs)\n        return decorated_function\n    return decorator\n\n\ndef feature_switch(flag_key, enabled_func, disabled_func=None):\n    """Decorator to switch between functions based on feature flag"""\n    def decorator(f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):\n            flagvault = current_app.extensions.get(\'flagvault\')\n            if flagvault and flagvault.is_enabled(flag_key):\n                return enabled_func(*args, **kwargs)\n            elif disabled_func:\n                return disabled_func(*args, **kwargs)\n            else:\n                return f(*args, **kwargs)\n        return decorated_function\n    return decorator\n'})}),"\n",(0,l.jsx)(n.h3,{id:"2-usage-examples",children:"2. Usage Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from flask import Flask, render_template\nfrom decorators import feature_required, feature_switch\n\napp = Flask(__name__)\nflagvault = FlagVault(app)\n\n\n@app.route('/beta')\n@feature_required('beta-features', redirect_to='index')\ndef beta_features():\n    \"\"\"This route is only accessible when beta features are enabled\"\"\"\n    return render_template('beta.html')\n\n\n@app.route('/checkout')\n@feature_switch('express-checkout', \n                enabled_func=lambda: render_template('express_checkout.html'),\n                disabled_func=lambda: render_template('standard_checkout.html'))\ndef checkout():\n    \"\"\"This route switches between checkout experiences\"\"\"\n    pass\n\n\n@app.route('/api/data')\ndef api_data():\n    \"\"\"API endpoint with feature flags\"\"\"\n    data = {\n        'version': '1.0',\n        'features': {}\n    }\n    \n    if flagvault.is_enabled('api-v2'):\n        data['version'] = '2.0'\n        data['features']['pagination'] = True\n        data['features']['filtering'] = True\n    \n    return jsonify(data)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"blueprint-integration",children:"Blueprint Integration"}),"\n",(0,l.jsx)(n.p,{children:"Use feature flags with Flask blueprints:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# blueprints/admin.py\nfrom flask import Blueprint, render_template, current_app\n\nadmin_bp = Blueprint('admin', __name__, url_prefix='/admin')\n\n@admin_bp.before_request\ndef check_admin_features():\n    \"\"\"Check if admin panel is enabled\"\"\"\n    flagvault = current_app.extensions.get('flagvault')\n    if not flagvault or not flagvault.is_enabled('admin-panel'):\n        abort(404)\n\n\n@admin_bp.route('/')\ndef index():\n    flagvault = current_app.extensions.get('flagvault')\n    \n    context = {\n        'advanced_tools': flagvault.is_enabled('admin-advanced-tools'),\n        'bulk_operations': flagvault.is_enabled('admin-bulk-operations'),\n        'user_impersonation': flagvault.is_enabled('admin-impersonation')\n    }\n    \n    return render_template('admin/index.html', **context)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"api-integration",children:"API Integration"}),"\n",(0,l.jsx)(n.h3,{id:"1-restful-api-with-feature-flags",children:"1. RESTful API with Feature Flags"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from flask import Flask, jsonify, request\nfrom flask_restful import Api, Resource\n\napp = Flask(__name__)\napi = Api(app)\nflagvault = FlagVault(app)\n\n\nclass FeatureFlagResource(Resource):\n    \"\"\"API endpoint to check feature flags\"\"\"\n    \n    def get(self, flag_key):\n        \"\"\"Check if a feature flag is enabled\"\"\"\n        is_enabled = flagvault.is_enabled(flag_key)\n        return {\n            'flag': flag_key,\n            'enabled': is_enabled,\n            'environment': app.config.get('FLAGVAULT_ENVIRONMENT')\n        }\n\n\nclass ProductResource(Resource):\n    \"\"\"Product API with feature flags\"\"\"\n    \n    def get(self, product_id):\n        product = get_product(product_id)  # Your product logic\n        \n        response = {\n            'id': product.id,\n            'name': product.name,\n            'price': product.price\n        }\n        \n        # Add features based on flags\n        if flagvault.is_enabled('product-reviews'):\n            response['reviews'] = get_product_reviews(product_id)\n        \n        if flagvault.is_enabled('product-recommendations'):\n            response['recommendations'] = get_recommendations(product_id)\n        \n        return response\n\n\napi.add_resource(FeatureFlagResource, '/api/flags/<string:flag_key>')\napi.add_resource(ProductResource, '/api/products/<int:product_id>')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"2-middleware-for-feature-flags",children:"2. Middleware for Feature Flags"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'class FeatureFlagMiddleware:\n    """Add feature flag information to requests"""\n    \n    def __init__(self, app, flagvault):\n        self.app = app\n        self.flagvault = flagvault\n    \n    def __call__(self, environ, start_response):\n        # Add feature flags to environ\n        environ[\'flagvault\'] = self.flagvault\n        return self.app(environ, start_response)\n\n\n# Apply middleware\nfrom werkzeug.middleware.dispatcher import DispatcherMiddleware\n\napp.wsgi_app = FeatureFlagMiddleware(app.wsgi_app, flagvault)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,l.jsx)(n.h3,{id:"1-mock-feature-flags",children:"1. Mock Feature Flags"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# test_app.py\nimport pytest\nfrom unittest.mock import Mock, patch\nfrom app import app, flagvault\n\n\n@pytest.fixture\ndef client():\n    app.config['TESTING'] = True\n    with app.test_client() as client:\n        yield client\n\n\ndef test_beta_route_enabled(client):\n    \"\"\"Test beta route when feature is enabled\"\"\"\n    with patch.object(flagvault, 'is_enabled', return_value=True):\n        response = client.get('/beta')\n        assert response.status_code == 200\n        assert b'Beta Features' in response.data\n\n\ndef test_beta_route_disabled(client):\n    \"\"\"Test beta route when feature is disabled\"\"\"\n    with patch.object(flagvault, 'is_enabled', return_value=False):\n        response = client.get('/beta')\n        assert response.status_code == 302  # Redirect\n\n\nclass TestDashboard:\n    \"\"\"Test dashboard with different feature flag states\"\"\"\n    \n    def test_new_dashboard_layout(self, client):\n        with patch.object(flagvault, 'is_enabled') as mock_is_enabled:\n            # Configure mock for specific flags\n            def side_effect(flag_key, default=False):\n                if flag_key == 'new-dashboard-layout':\n                    return True\n                return default\n            \n            mock_is_enabled.side_effect = side_effect\n            \n            response = client.get('/dashboard')\n            assert b'grid-layout' in response.data\n"})}),"\n",(0,l.jsx)(n.h3,{id:"2-test-configuration",children:"2. Test Configuration"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# test_config.py\nclass TestConfig:\n    TESTING = True\n    FLAGVAULT_API_KEY = 'test_dummy_key'\n    FLAGVAULT_BASE_URL = 'http://localhost:3001'\n    FLAGVAULT_ENVIRONMENT = 'test'\n    \n    # Disable actual API calls during tests\n    FLAGVAULT_MOCK = True\n\n\n# In your test setup\napp.config.from_object(TestConfig)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"production-best-practices",children:"Production Best Practices"}),"\n",(0,l.jsx)(n.h3,{id:"1-caching",children:"1. Caching"}),"\n",(0,l.jsx)(n.p,{children:"Implement caching to reduce API calls:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from flask_caching import Cache\nfrom datetime import timedelta\n\ncache = Cache(app, config={\'CACHE_TYPE\': \'simple\'})\n\n\nclass CachedFlagVault(FlagVault):\n    """FlagVault with caching support"""\n    \n    def is_enabled(self, flag_key, default_value=False):\n        cache_key = f\'flagvault:{flag_key}\'\n        \n        # Try to get from cache\n        cached_value = cache.get(cache_key)\n        if cached_value is not None:\n            return cached_value\n        \n        # Get from API\n        value = super().is_enabled(flag_key, default_value)\n        \n        # Cache for 5 minutes\n        cache.set(cache_key, value, timeout=300)\n        \n        return value\n    \n    def clear_cache(self, flag_key=None):\n        """Clear cached flag values"""\n        if flag_key:\n            cache.delete(f\'flagvault:{flag_key}\')\n        else:\n            # Clear all flag cache\n            cache.clear()\n'})}),"\n",(0,l.jsx)(n.h3,{id:"2-performance-monitoring",children:"2. Performance Monitoring"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"import time\nfrom flask import g\n\n\n@app.before_request\ndef before_request():\n    g.start_time = time.time()\n    g.flag_checks = []\n\n\n@app.after_request\ndef after_request(response):\n    if hasattr(g, 'flag_checks') and g.flag_checks:\n        total_time = sum(check['duration'] for check in g.flag_checks)\n        response.headers['X-FeatureFlag-Checks'] = str(len(g.flag_checks))\n        response.headers['X-FeatureFlag-Time'] = f\"{total_time:.3f}s\"\n    return response\n\n\n# Wrap is_enabled to track performance\noriginal_is_enabled = flagvault.is_enabled\n\ndef tracked_is_enabled(flag_key, default_value=False):\n    start = time.time()\n    result = original_is_enabled(flag_key, default_value)\n    duration = time.time() - start\n    \n    if hasattr(g, 'flag_checks'):\n        g.flag_checks.append({\n            'flag': flag_key,\n            'duration': duration,\n            'result': result\n        })\n    \n    return result\n\nflagvault.is_enabled = tracked_is_enabled\n"})}),"\n",(0,l.jsx)(n.h3,{id:"3-health-check-endpoint",children:"3. Health Check Endpoint"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"@app.route('/health')\ndef health_check():\n    \"\"\"Health check endpoint including feature flag status\"\"\"\n    health = {\n        'status': 'healthy',\n        'timestamp': datetime.utcnow().isoformat(),\n        'feature_flags': {\n            'connected': flagvault.client is not None\n        }\n    }\n    \n    # Test a canary flag\n    try:\n        canary = flagvault.is_enabled('health-check-canary', default_value=True)\n        health['feature_flags']['canary'] = canary\n    except Exception as e:\n        health['feature_flags']['error'] = str(e)\n        health['status'] = 'degraded'\n    \n    return jsonify(health)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"example-complete-application",children:"Example: Complete Application"}),"\n",(0,l.jsx)(n.p,{children:"Here's a complete Flask application with FlagVault integration:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# app.py\nimport os\nfrom flask import Flask, render_template, jsonify\nfrom flask_caching import Cache\nfrom dotenv import load_dotenv\nfrom flask_flagvault import FlagVault\nfrom decorators import feature_required\n\n# Load environment\nload_dotenv()\n\n# Create Flask app\napp = Flask(__name__)\napp.config.from_object('config.Config')\n\n# Initialize extensions\ncache = Cache(app, config={'CACHE_TYPE': 'simple'})\nflagvault = FlagVault(app)\n\n\n# Context processor\n@app.context_processor\ndef inject_feature_flags():\n    return {\n        'flag_enabled': flagvault.is_enabled\n    }\n\n\n# Routes\n@app.route('/')\ndef index():\n    features = {\n        'hero_banner': flagvault.is_enabled('hero-banner'),\n        'testimonials': flagvault.is_enabled('testimonials'),\n        'pricing_table': flagvault.is_enabled('pricing-table')\n    }\n    return render_template('index.html', features=features)\n\n\n@app.route('/dashboard')\n@login_required  # Your auth decorator\ndef dashboard():\n    user_features = {\n        'analytics': flagvault.is_enabled('user-analytics'),\n        'export': flagvault.is_enabled('data-export'),\n        'collaboration': flagvault.is_enabled('team-collaboration')\n    }\n    \n    if flagvault.is_enabled('new-dashboard'):\n        template = 'dashboard/v2.html'\n    else:\n        template = 'dashboard/v1.html'\n    \n    return render_template(template, features=user_features)\n\n\n@app.route('/api/features')\ndef api_features():\n    \"\"\"List all available features for the current user\"\"\"\n    all_features = [\n        'new-dashboard',\n        'user-analytics',\n        'data-export',\n        'team-collaboration',\n        'dark-mode',\n        'beta-features'\n    ]\n    \n    enabled_features = {\n        feature: flagvault.is_enabled(feature)\n        for feature in all_features\n    }\n    \n    return jsonify({\n        'features': enabled_features,\n        'environment': app.config.get('FLAGVAULT_ENVIRONMENT')\n    })\n\n\n@app.route('/beta')\n@feature_required('beta-features', redirect_to='index')\ndef beta():\n    return render_template('beta.html')\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n"})}),"\n",(0,l.jsx)(n.p,{children:"This integration provides a production-ready setup for using FlagVault with Flask!"})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>s});var t=a(6540);const l={},r=t.createContext(l);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);