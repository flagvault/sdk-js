"use strict";(self.webpackChunkflagvault_sdk_docs=self.webpackChunkflagvault_sdk_docs||[]).push([[560],{2141:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"integrations/react","title":"React Integration Guide","description":"This guide shows how to integrate FlagVault with your React application for feature flag management.","source":"@site/docs/integrations/react.md","sourceDirName":"integrations","slug":"/integrations/react","permalink":"/docs/integrations/react","draft":false,"unlisted":false,"editUrl":"https://github.com/flagvault/sdk-js/edit/main/docs-website/docs/integrations/react.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Advanced Usage","permalink":"/docs/advanced-usage"},"next":{"title":"Django Integration Guide","permalink":"/docs/integrations/django"}}');var r=a(4848),s=a(8453);const o={sidebar_position:3},i="React Integration Guide",l={},d=[{value:"Installation",id:"installation",level:2},{value:"Basic Setup",id:"basic-setup",level:2},{value:"1. Environment Configuration",id:"1-environment-configuration",level:3},{value:"2. Initialize SDK",id:"2-initialize-sdk",level:3},{value:"Built-in React Hooks",id:"built-in-react-hooks",level:2},{value:"1. Basic Feature Flag Hook",id:"1-basic-feature-flag-hook",level:3},{value:"2. Cached Feature Flag Hook",id:"2-cached-feature-flag-hook",level:3},{value:"Component Usage Examples",id:"component-usage-examples",level:2},{value:"1. Basic Component",id:"1-basic-component",level:3},{value:"2. Conditional Rendering",id:"2-conditional-rendering",level:3},{value:"3. Feature Flag Higher-Order Component",id:"3-feature-flag-higher-order-component",level:3},{value:"Context Provider Pattern",id:"context-provider-pattern",level:2},{value:"Next.js Integration",id:"nextjs-integration",level:2},{value:"1. API Route for Server-Side Flags",id:"1-api-route-for-server-side-flags",level:3},{value:"2. Server-Side Rendering with Flags",id:"2-server-side-rendering-with-flags",level:3},{value:"Testing with Feature Flags",id:"testing-with-feature-flags",level:2},{value:"1. Mocking Feature Flags in Tests",id:"1-mocking-feature-flags-in-tests",level:3},{value:"2. Test Utilities",id:"2-test-utilities",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Error Boundaries",id:"1-error-boundaries",level:3},{value:"2. Performance Optimization",id:"2-performance-optimization",level:3},{value:"3. Development Tools",id:"3-development-tools",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"react-integration-guide",children:"React Integration Guide"})}),"\n",(0,r.jsx)(n.p,{children:"This guide shows how to integrate FlagVault with your React application for feature flag management."}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install @flagvault/sdk\n# or\nyarn add @flagvault/sdk\n"})}),"\n",(0,r.jsx)(n.h2,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,r.jsx)(n.h3,{id:"1-environment-configuration",children:"1. Environment Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Add your FlagVault API key to your environment variables:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# .env.local (for Next.js) or .env (for Create React App)\nREACT_APP_FLAGVAULT_API_KEY=live_your_api_key_here\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-initialize-sdk",children:"2. Initialize SDK"}),"\n",(0,r.jsx)(n.p,{children:"Create a service to manage the FlagVault SDK:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/services/flagvault.ts\nimport FlagVaultSDK from '@flagvault/sdk';\n\n// Initialize SDK once\nconst sdk = new FlagVaultSDK({\n  apiKey: process.env.REACT_APP_FLAGVAULT_API_KEY! // Should be 'live_...' or 'test_...'\n});\n\nexport default sdk;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"built-in-react-hooks",children:"Built-in React Hooks"}),"\n",(0,r.jsx)(n.p,{children:"FlagVault SDK v1.1.0+ includes built-in React hooks for seamless integration. No need to create custom hooks!"}),"\n",(0,r.jsx)(n.h3,{id:"1-basic-feature-flag-hook",children:"1. Basic Feature Flag Hook"}),"\n",(0,r.jsxs)(n.p,{children:["Use the built-in ",(0,r.jsx)(n.code,{children:"useFeatureFlag"})," hook:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Import the built-in hook\nimport FlagVaultSDK, { useFeatureFlag } from '@flagvault/sdk';\nimport sdk from '../services/flagvault';\n\nfunction MyComponent() {\n  const { isEnabled, isLoading, error } = useFeatureFlag(sdk, 'new-feature', false);\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n\n  return isEnabled ? <NewFeature /> : <OldFeature />;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-cached-feature-flag-hook",children:"2. Cached Feature Flag Hook"}),"\n",(0,r.jsxs)(n.p,{children:["For better performance, use the built-in ",(0,r.jsx)(n.code,{children:"useFeatureFlagCached"})," hook:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Import the built-in cached hook\nimport FlagVaultSDK, { useFeatureFlagCached } from '@flagvault/sdk';\nimport sdk from '../services/flagvault';\n\nfunction MyComponent() {\n  const { isEnabled, isLoading, error } = useFeatureFlagCached(\n    sdk, \n    'new-feature', \n    false, \n    300000 // 5 minutes cache\n  );\n\n  return isEnabled ? <NewFeature /> : <OldFeature />;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"component-usage-examples",children:"Component Usage Examples"}),"\n",(0,r.jsx)(n.h3,{id:"1-basic-component",children:"1. Basic Component"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// src/components/MyFeature.tsx\nimport React from 'react';\nimport { useFeatureFlag } from '@flagvault/sdk';\nimport sdk from '../services/flagvault';\n\nfunction MyFeature() {\n  const { isEnabled, isLoading, error } = useFeatureFlag(sdk, 'new-ui-feature', false);\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div>Error checking feature flag: {error.message}</div>;\n\n  return isEnabled ? (\n    <div className=\"new-feature\">\n      <h2>\ud83d\ude80 New Feature UI</h2>\n      <p>This is the enhanced user interface!</p>\n    </div>\n  ) : (\n    <div className=\"classic-feature\">\n      <h2>\ud83d\udcca Classic UI</h2>\n      <p>This is the stable user interface.</p>\n    </div>\n  );\n}\n\nexport default MyFeature;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-conditional-rendering",children:"2. Conditional Rendering"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// src/components/Dashboard.tsx\nimport React from 'react';\nimport { useFeatureFlag } from '@flagvault/sdk';\nimport sdk from '../services/flagvault';\nimport AdvancedAnalytics from './AdvancedAnalytics';\nimport BasicAnalytics from './BasicAnalytics';\n\nfunction Dashboard() {\n  const { isEnabled: showAdvancedAnalytics } = useFeatureFlag(sdk, 'advanced-analytics', false);\n  const { isEnabled: showBetaFeatures } = useFeatureFlag(sdk, 'beta-features', false);\n  const { isEnabled: showDarkMode } = useFeatureFlag(sdk, 'dark-mode', false);\n\n  return (\n    <div className={`dashboard ${showDarkMode ? 'dark-theme' : 'light-theme'}`}>\n      <h1>Dashboard</h1>\n      \n      {/* Conditional analytics */}\n      {showAdvancedAnalytics ? <AdvancedAnalytics /> : <BasicAnalytics />}\n      \n      {/* Beta features section */}\n      {showBetaFeatures && (\n        <div className=\"beta-section\">\n          <h2>\ud83e\uddea Beta Features</h2>\n          <p>These features are in beta testing.</p>\n        </div>\n      )}\n      \n      {/* Theme toggle */}\n      {showDarkMode && (\n        <button onClick={() => document.body.classList.toggle('dark-theme')}>\n          \ud83c\udf13 Toggle Theme\n        </button>\n      )}\n    </div>\n  );\n}\n\nexport default Dashboard;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-feature-flag-higher-order-component",children:"3. Feature Flag Higher-Order Component"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// src/hocs/withFeatureFlag.tsx\nimport React from 'react';\nimport { useFeatureFlag } from '@flagvault/sdk';\nimport sdk from '../services/flagvault';\n\ninterface WithFeatureFlagProps {\n  flagKey: string;\n  defaultValue?: boolean;\n  fallback?: React.ComponentType;\n  loading?: React.ComponentType;\n}\n\nfunction withFeatureFlag<P extends object>(\n  Component: React.ComponentType<P>,\n  options: WithFeatureFlagProps\n) {\n  return function WrappedComponent(props: P) {\n    const { isEnabled, isLoading, error } = useFeatureFlag(\n      sdk, \n      options.flagKey, \n      options.defaultValue ?? false\n    );\n\n    if (isLoading && options.loading) {\n      const LoadingComponent = options.loading;\n      return <LoadingComponent />;\n    }\n\n    if (isLoading) {\n      return <div>Loading feature...</div>;\n    }\n\n    if (error || !isEnabled) {\n      if (options.fallback) {\n        const FallbackComponent = options.fallback;\n        return <FallbackComponent />;\n      }\n      return null;\n    }\n\n    return <Component {...props} />;\n  };\n}\n\n// Usage\nconst EnhancedCheckout = withFeatureFlag(NewCheckoutComponent, {\n  flagKey: 'enhanced-checkout',\n  defaultValue: false,\n  fallback: StandardCheckoutComponent,\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"context-provider-pattern",children:"Context Provider Pattern"}),"\n",(0,r.jsx)(n.p,{children:"For app-wide feature flag management:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// src/contexts/FeatureFlagContext.tsx\nimport React, { createContext, useContext, ReactNode } from 'react';\nimport { useFeatureFlag } from '@flagvault/sdk';\nimport sdk from '../services/flagvault';\n\ninterface FeatureFlagContextType {\n  flags: {\n    [key: string]: boolean;\n  };\n  isLoading: boolean;\n}\n\nconst FeatureFlagContext = createContext<FeatureFlagContextType | undefined>(undefined);\n\ninterface FeatureFlagProviderProps {\n  children: ReactNode;\n  flagKeys: string[];\n}\n\nexport function FeatureFlagProvider({ children, flagKeys }: FeatureFlagProviderProps) {\n  // This is a simplified example - in practice, you'd want to batch these calls\n  const flagResults = flagKeys.map(key => ({\n    key,\n    ...useFeatureFlag(sdk, key, false)\n  }));\n\n  const flags = flagResults.reduce((acc, { key, isEnabled }) => {\n    acc[key] = isEnabled;\n    return acc;\n  }, {} as { [key: string]: boolean });\n\n  const isLoading = flagResults.some(result => result.isLoading);\n\n  return (\n    <FeatureFlagContext.Provider value={{ flags, isLoading }}>\n      {children}\n    </FeatureFlagContext.Provider>\n  );\n}\n\nexport function useFeatureFlags() {\n  const context = useContext(FeatureFlagContext);\n  if (context === undefined) {\n    throw new Error('useFeatureFlags must be used within a FeatureFlagProvider');\n  }\n  return context;\n}\n\n// Usage in App.tsx\nfunction App() {\n  return (\n    <FeatureFlagProvider flagKeys={['new-ui', 'dark-mode', 'beta-features']}>\n      <Dashboard />\n    </FeatureFlagProvider>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"nextjs-integration",children:"Next.js Integration"}),"\n",(0,r.jsx)(n.h3,{id:"1-api-route-for-server-side-flags",children:"1. API Route for Server-Side Flags"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// pages/api/feature-flags/[flag].ts\nimport type { NextApiRequest, NextApiResponse } from 'next';\nimport FlagVaultSDK from '@flagvault/sdk';\n\nconst sdk = new FlagVaultSDK({\n  apiKey: process.env.FLAGVAULT_API_KEY!\n});\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const { flag } = req.query;\n\n  if (typeof flag !== 'string') {\n    return res.status(400).json({ error: 'Invalid flag key' });\n  }\n\n  try {\n    const isEnabled = await sdk.isEnabled(flag);\n    res.status(200).json({ enabled: isEnabled });\n  } catch (error) {\n    console.error('Error checking feature flag:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-server-side-rendering-with-flags",children:"2. Server-Side Rendering with Flags"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// pages/dashboard.tsx\nimport { GetServerSideProps } from 'next';\nimport FlagVaultSDK from '@flagvault/sdk';\n\ninterface DashboardProps {\n  features: {\n    advancedAnalytics: boolean;\n    betaFeatures: boolean;\n  };\n}\n\nexport default function Dashboard({ features }: DashboardProps) {\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      {features.advancedAnalytics && <AdvancedAnalytics />}\n      {features.betaFeatures && <BetaFeatures />}\n    </div>\n  );\n}\n\nexport const getServerSideProps: GetServerSideProps = async () => {\n  const sdk = new FlagVaultSDK({\n    apiKey: process.env.FLAGVAULT_API_KEY!\n  });\n\n  try {\n    const [advancedAnalytics, betaFeatures] = await Promise.all([\n      sdk.isEnabled('advanced-analytics'),\n      sdk.isEnabled('beta-features')\n    ]);\n\n    return {\n      props: {\n        features: {\n          advancedAnalytics,\n          betaFeatures,\n        },\n      },\n    };\n  } catch (error) {\n    console.error('Error fetching feature flags:', error);\n    return {\n      props: {\n        features: {\n          advancedAnalytics: false,\n          betaFeatures: false,\n        },\n      },\n    };\n  }\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"testing-with-feature-flags",children:"Testing with Feature Flags"}),"\n",(0,r.jsx)(n.h3,{id:"1-mocking-feature-flags-in-tests",children:"1. Mocking Feature Flags in Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/__tests__/MyFeature.test.tsx\nimport React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport MyFeature from '../components/MyFeature';\nimport useFeatureFlag from '../hooks/useFeatureFlag';\n\n// Mock the hook\njest.mock('../hooks/useFeatureFlag');\nconst mockUseFeatureFlag = useFeatureFlag as jest.MockedFunction<typeof useFeatureFlag>;\n\ndescribe('MyFeature', () => {\n  it('renders new feature when flag is enabled', () => {\n    mockUseFeatureFlag.mockReturnValue({\n      isEnabled: true,\n      isLoading: false,\n      error: null,\n    });\n\n    render(<MyFeature />);\n    expect(screen.getByText('\ud83d\ude80 New Feature UI')).toBeInTheDocument();\n  });\n\n  it('renders classic feature when flag is disabled', () => {\n    mockUseFeatureFlag.mockReturnValue({\n      isEnabled: false,\n      isLoading: false,\n      error: null,\n    });\n\n    render(<MyFeature />);\n    expect(screen.getByText('\ud83d\udcca Classic UI')).toBeInTheDocument();\n  });\n\n  it('shows loading state', () => {\n    mockUseFeatureFlag.mockReturnValue({\n      isEnabled: false,\n      isLoading: true,\n      error: null,\n    });\n\n    render(<MyFeature />);\n    expect(screen.getByText('Loading...')).toBeInTheDocument();\n  });\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-test-utilities",children:"2. Test Utilities"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/test-utils/feature-flag-utils.ts\nimport { ReactElement } from 'react';\nimport { render } from '@testing-library/react';\nimport { FeatureFlagProvider } from '../contexts/FeatureFlagContext';\n\n// Custom render with feature flag context\nexport function renderWithFeatureFlags(\n  ui: ReactElement,\n  { flagKeys = [], ...renderOptions } = {}\n) {\n  function Wrapper({ children }: { children: React.ReactNode }) {\n    return (\n      <FeatureFlagProvider flagKeys={flagKeys}>\n        {children}\n      </FeatureFlagProvider>\n    );\n  }\n\n  return render(ui, { wrapper: Wrapper, ...renderOptions });\n}\n\n// Mock feature flag responses\nexport function mockFeatureFlags(flags: Record<string, boolean>) {\n  const mockUseFeatureFlag = jest.fn();\n  \n  mockUseFeatureFlag.mockImplementation((flagKey: string) => ({\n    isEnabled: flags[flagKey] || false,\n    isLoading: false,\n    error: null,\n  }));\n\n  return mockUseFeatureFlag;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"1-error-boundaries",children:"1. Error Boundaries"}),"\n",(0,r.jsx)(n.p,{children:"Wrap feature flag components in error boundaries:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// src/components/FeatureFlagErrorBoundary.tsx\nimport React, { Component, ErrorInfo, ReactNode } from 'react';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nclass FeatureFlagErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false\n  };\n\n  public static getDerivedStateFromError(_: Error): State {\n    return { hasError: true };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('Feature flag error:', error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return this.props.fallback || <div>Something went wrong with feature flags.</div>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default FeatureFlagErrorBoundary;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-performance-optimization",children:"2. Performance Optimization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/hooks/useFeatureFlagOptimized.ts\nimport { useMemo } from 'react';\nimport useFeatureFlag from './useFeatureFlag';\n\n// Memoize flag results to prevent unnecessary re-renders\nfunction useFeatureFlagOptimized(flagKey: string, defaultValue = false) {\n  const { isEnabled, isLoading, error } = useFeatureFlag(flagKey, defaultValue);\n  \n  return useMemo(() => ({\n    isEnabled,\n    isLoading,\n    error\n  }), [isEnabled, isLoading, error]);\n}\n\nexport default useFeatureFlagOptimized;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-development-tools",children:"3. Development Tools"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/components/FeatureFlagDebugger.tsx (development only)\nimport React from 'react';\nimport { useFeatureFlags } from '../contexts/FeatureFlagContext';\n\nfunction FeatureFlagDebugger() {\n  const { flags } = useFeatureFlags();\n\n  if (process.env.NODE_ENV !== 'development') {\n    return null;\n  }\n\n  return (\n    <div style={{\n      position: 'fixed',\n      bottom: 10,\n      right: 10,\n      background: '#000',\n      color: '#fff',\n      padding: 10,\n      borderRadius: 5,\n      fontSize: 12,\n      zIndex: 9999\n    }}>\n      <h4>\ud83c\udff4 Feature Flags</h4>\n      {Object.entries(flags).map(([key, value]) => (\n        <div key={key}>\n          {key}: {value ? '\u2705' : '\u274c'}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default FeatureFlagDebugger;\n"})}),"\n",(0,r.jsx)(n.p,{children:"This React integration guide provides a comprehensive approach to using FlagVault in React applications with hooks, context, testing, and best practices!"})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var t=a(6540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);